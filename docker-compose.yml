services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ['CMD', 'bash', '-c', "echo 'ok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - goods_store

  broker:
    image: confluentinc/cp-server:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - goods_store
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - goods_store
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - goods_store
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - '9002:9000'
      - '9001:9001'
    networks:
      - goods_store
    volumes:
      - 'minio_streaming_data:/data'
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"

  pgdatabase:
    image: postgres:13
    container_name: pgdatabase
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=goods_store
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - goods_store

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=root
    ports:
      - "8080:80"
    networks:
      - goods_store

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - goods_store

  airflow-postgres:
    image: postgres:14.0
    container_name: airflow-postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    logging:
      options:
        max-size: 10m
        max-file: "3"
    networks:
      - goods_store

  airflow-webserver:
    image: apache/airflow:2.10.3-python3.11
    container_name: airflow-webserver
    command: webserver
    entrypoint: ['/opt/airflow/scripts/entrypoint.sh']
    depends_on:
      - airflow-postgres
    environment:
      - LOAD_EX=n
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      - AIRFLOW_WEBSERVER_SECRET_KEY=this_is_a_very_secured_key
      - AIRFLOW_CONN_GOODS_STORE_DB=postgresql+psycopg2://root:root@pgdatabase:5432/goods_store
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
    logging:
      options:
        max-size: 10m
        max-file: "3"
    volumes:
      - ./airflow:/opt/airflow
      - ./airflow/.env:/opt/airflow/.env
      - ./airflow/dags:/opt/airflow/dags
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8083:8080"
    networks:
      - goods_store
    healthcheck:
      test: ['CMD-SHELL', "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 60s
      timeout: 30s
      retries: 10

  airflow-scheduler:
    image: apache/airflow:2.10.3-python3.11
    container_name: airflow-scheduler
    command: scheduler
    entrypoint: ['/opt/airflow/scripts/entrypoint.sh']
    depends_on:
      airflow-webserver:
        condition: service_healthy
    volumes:
      - ./airflow:/opt/airflow
      - ./airflow/.env:/opt/airflow/.env
      - ./airflow/dags:/opt/airflow/dags
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOAD_EX=n
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      - AIRFLOW_WEBSERVER_SECRET_KEY=this_is_a_very_secured_key
      - AIRFLOW_CONN_GOODS_STORE_DB=postgresql+psycopg2://root:root@pgdatabase:5432/goods_store
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
    networks:
      - goods_store

  python:
    build:
      context: .
      dockerfile: Dockerfile-python
    container_name: python
    volumes:
      - ./config:/app/config
      - ./utils:/app/utils
      - ./data:/app/data
      - ./requirements.txt:/app/requirements.txt
      - ./kafka:/app/kafka
      - ./cleanup:/app/cleanup
      - ./generate:/app/generate
      - ./extract:/app/extract
    working_dir: /app
    environment:
      - PYTHONPATH=/app
    networks:
      - goods_store

  spark:
    build:
      context: .
      dockerfile: Dockerfile-spark
    container_name: spark
    ports:
      - "4040:4040"
      - "8082:8080"
      - "7077:7077"
    volumes:
      - ./config:/app/config
      - ./utils:/app/utils
      - ./data:/app/data
      - ./kafka:/app/kafka
      - ./cleanup:/app/cleanup
      - ./generate:/app/generate
      - ./spark_scripts:/app/spark_scripts
    networks:
      - goods_store
    tty: true
    stdin_open: true
    depends_on:
      - pgdatabase
      - broker

networks:
  goods_store:
    name: goods_store_network

volumes:
  minio_streaming_data:
  postgres_data:
  grafana_data: